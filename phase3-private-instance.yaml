AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Development Environment Phase 3 - Private Instance'

Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: 'Name of an existing EC2 KeyPair to enable SSH access'
  
  FoundationStackName:
    Type: String
    Default: 'devcloud-foundation'
    Description: 'Name of the foundation stack that contains VPC and S3 resources'
    
  VPNNATStackName:
    Type: String
    Default: 'devcloud-vpn-nat'
    Description: 'Name of the Phase 2 stack that contains the VPN/NAT Gateway'
    
  DomainName:
    Type: String
    Default: 'devcloud.bytecat.co.za'
    Description: 'Domain name for the hosted zone'
  
  PrivateInstanceIP:
    Type: String
    Default: '172.16.2.100'
    Description: 'Fixed private IP address for Private instance'
    AllowedPattern: '^172\.16\.2\.[0-9]{1,3}$'
    ConstraintDescription: 'Must be a valid IP address in the private subnet range (172.16.2.0/24)'

Resources:
  # =============================================================================
  # PRIVATE INSTANCE - Main application server
  # =============================================================================

  # Private instance - main application server with fixed IP and no direct internet access
  PrivateInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.small
      ImageId: ami-042ad6e600ef0750b  # Amazon Linux 2023 AMI 2023.8.20250721.2 arm64
      KeyName: !Ref KeyPairName
      SubnetId: 
        Fn::ImportValue: !Sub '${FoundationStackName}-Private-Subnet-ID'
      PrivateIpAddress: !Ref PrivateInstanceIP  # Fixed IP for predictable networking
      SecurityGroupIds:
        - Fn::ImportValue: !Sub '${FoundationStackName}-Private-SG-ID'
      IamInstanceProfile: !Select [1, !Split ['/', 
        Fn::ImportValue: !Sub '${FoundationStackName}-Private-Instance-Profile-ARN']]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            VolumeType: gp3
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            
            # Set up logging for userdata execution
            exec > >(tee /var/log/user-data.log) 2>&1
            
            echo "=== DevCloud Private Instance Initialization Started ==="
            echo "Timestamp: $(date)"

            # Create directories for scripts and parameters
            mkdir -p /opt/devcloud/scripts
            mkdir -p /opt/devcloud/config

            # Save initialization parameters to file for future use
            cat > /opt/devcloud/config/init-parameters.env << EOF
            PRIVATE_HOSTED_ZONE_ID=${PrivateHostedZone}
            DOMAIN_NAME=${DomainName}
            SCRIPTS_BUCKET=${ScriptsBucket}
            DATA_BUCKET=${DataBucket}
            EFS_FILESYSTEM_ID=${EFSFileSystem}
            VPN_NAT_PRIVATE_IP=${VPNNATPrivateIP}
            EOF
            
            # Get instance metadata using IMDSv2
            TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600" -s)
            INSTANCE_ID=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/instance-id)
            AMI_ID=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/ami-id)
            INSTANCE_TYPE=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/instance-type)
            
            echo "Instance ID: $INSTANCE_ID"
            echo "AMI ID: $AMI_ID"
            echo "Instance Type: $INSTANCE_TYPE"
            echo "=========================================================="
            
            # Verify NAT Gateway connectivity before proceeding
            echo "Verifying internet connectivity through NAT Gateway..."
            VPN_NAT_IP=${VPNNATPrivateIP}
            echo "Expected NAT Gateway IP: $VPN_NAT_IP"
            
            # Test connectivity with retries
            for i in {1..10}; do
                echo "Connectivity test attempt $i/10..."
                if curl -s --connect-timeout 10 http://checkip.amazonaws.com/ > /dev/null; then
                    echo "✓ Internet connectivity verified through NAT Gateway"
                    break
                elif [ $i -eq 10 ]; then
                    echo "✗ Failed to establish internet connectivity after 10 attempts"
                    echo "This may indicate the NAT Gateway is not properly configured"
                    echo "Continuing with initialization but some steps may fail..."
                    break
                else
                    echo "  Attempt $i failed, retrying in 30 seconds..."
                    sleep 30
                fi
            done
            
            # Update system packages
            echo "Updating system packages..."
            yum update -y
            
            # Download and execute initialization script from S3
            echo "Downloading initialization script from S3..."
            echo "Scripts Bucket: ${ScriptsBucket}"
            echo "Data Bucket: ${DataBucket}"
            echo "Private Hosted Zone: ${PrivateHostedZone}"
            echo "Domain Name: ${DomainName}"
            echo "EFS File System: ${EFSFileSystem}"
            
            # Create directories for scripts and parameters
            mkdir -p /opt/devcloud/scripts
            mkdir -p /opt/devcloud/config
            

            
            if aws s3 cp s3://${ScriptsBucket}/init/private-instance-init.sh /opt/devcloud/scripts/private-instance-init.sh; then
                echo "✓ Successfully downloaded private-instance-init.sh"
                chmod +x /opt/devcloud/scripts/private-instance-init.sh
                
                echo "Executing initialization script..."
                if /opt/devcloud/scripts/private-instance-init.sh; then
                    echo "✓ Private instance initialization completed successfully"
                else
                    echo "✗ Private instance initialization failed with exit code $?"
                    exit 1
                fi
            else
                echo "✗ Failed to download private-instance-init.sh from S3"
                exit 1
            fi
            
            echo "=== DevCloud Private Instance Initialization Completed ==="
            echo "Timestamp: $(date)"
            echo "Parameters saved to: /opt/devcloud/config/init-parameters.env"
            echo "Scripts stored in: /opt/devcloud/scripts/"
            echo "Log file: /var/log/user-data.log"
            echo "=========================================================="
          - ScriptsBucket: 
              Fn::ImportValue: !Sub '${FoundationStackName}-Scripts-Bucket-Name'
            DataBucket:
              Fn::ImportValue: !Sub '${FoundationStackName}-Data-Bucket-Name'
            PrivateHostedZone:
              Fn::ImportValue: !Sub '${FoundationStackName}-Private-Hosted-Zone-ID'
            DomainName: !Ref DomainName
            EFSFileSystem:
              Fn::ImportValue: !Sub '${FoundationStackName}-EFS-FileSystem-ID'
            VPNNATPrivateIP:
              Fn::ImportValue: !Sub '${VPNNATStackName}-VPN-NAT-Private-IP'
      Tags:
        - Key: Name
          Value: DevCloud-Kite-Server

  # =============================================================================
  # IAM POLICY ATTACHMENTS - Policies for private instance management
  # =============================================================================

  # Policy for managing private instance - allows start/stop operations
  PrivateInstanceManagementPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DevCloud-Private-Instance-Management
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ec2:StartInstances
              - ec2:StopInstances
              - ec2:DescribeInstances
              - ec2:DescribeInstanceStatus
            Resource:
              - !Sub 'arn:aws:ec2:af-south-1:${AWS::AccountId}:instance/${PrivateInstance}'
      Roles:
        - DevCloud-Instance-Management-Role

Outputs:
  PrivateInstanceId:
    Description: Private Instance ID
    Value: !Ref PrivateInstance
    Export:
      Name: !Sub '${AWS::StackName}-Private-Instance-ID'

  PrivateInstancePrivateIP:
    Description: Private Instance Private IP (Fixed)
    Value: !GetAtt PrivateInstance.PrivateIp
    Export:
      Name: !Sub '${AWS::StackName}-Private-Instance-Private-IP'
  
  # Network Configuration Documentation
  PrivateNetworkConfiguration:
    Description: 'Private Instance Network Configuration'
    Value: !Sub 
      - 'Private Instance: ${PrivateInstanceIP} | Connects through NAT: ${VPNNATPrivateIP}'
      - PrivateInstanceIP: !Ref PrivateInstanceIP
        VPNNATPrivateIP:
          Fn::ImportValue: !Sub '${VPNNATStackName}-VPN-NAT-Private-IP'
    Export:
      Name: !Sub '${AWS::StackName}-Private-Network-Configuration'
      
  # Complete Network Overview
  CompleteNetworkConfiguration:
    Description: 'Complete DevCloud Network Configuration'
    Value: !Sub 
      - 'VPN/NAT: ${VPNNATPrivateIP} | Private: ${PrivateInstanceIP} | WireGuard: 10.0.0.1/24 | Client Range: 10.0.0.2-254'
      - VPNNATPrivateIP:
          Fn::ImportValue: !Sub '${VPNNATStackName}-VPN-NAT-Private-IP'
        PrivateInstanceIP: !Ref PrivateInstanceIP
    Export:
      Name: !Sub '${AWS::StackName}-Complete-Network-Configuration'
