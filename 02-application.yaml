AWSTemplateFormatVersion: '2010-09-09'
Description: 'DevCloud Application Infrastructure - Kite Server with EFS and Data Storage'

Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: 'Name of an existing EC2 KeyPair to enable SSH access'
  
  NetworkStackName:
    Type: String
    Default: 'devcloud-network'
    Description: 'Name of the network stack that contains VPC and networking resources'
    
  DomainName:
    Type: String
    Default: 'devcloud.bytecat.co.za'
    Description: 'Domain name for the hosted zone'
  
  PrivateInstanceIP:
    Type: String
    Default: '172.16.2.100'
    Description: 'Fixed private IP address for Private instance'
    AllowedPattern: '^172\.16\.2\.[0-9]{1,3}$'
    ConstraintDescription: 'Must be a valid IP address in the private subnet range (172.16.2.0/24)'

  ApplicationName:
    Type: String
    Default: 'kite-server'
    Description: 'Name of the application (used for resource naming)'

Resources:
  # =============================================================================
  # S3 STORAGE - Application data bucket
  # =============================================================================

  # S3 bucket for application data and user files
  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'devcloud-data-${ApplicationName}-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub 'DevCloud-Data-${ApplicationName}'
        - Key: Application
          Value: !Ref ApplicationName

  # =============================================================================
  # EFS FILE SYSTEM - Shared application storage
  # =============================================================================

  # Elastic File System - provides shared persistent storage for application
  EFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
      FileSystemTags:
        - Key: Name
          Value: !Sub 'DevCloud-EFS-${ApplicationName}'
        - Key: Application
          Value: !Ref ApplicationName

  # EFS mount target - allows private subnet to access the file system
  EFSMountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: 
        Fn::ImportValue: !Sub '${NetworkStackName}-Private-Subnet-ID'
      SecurityGroups:
        - Fn::ImportValue: !Sub '${NetworkStackName}-EFS-SG-ID'

  # =============================================================================
  # IAM ROLES FOR APPLICATION INSTANCE
  # =============================================================================

  # IAM role for private instances - allows S3 access and private DNS management only
  PrivateInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'DevCloud-${ApplicationName}-Role-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: !Sub 'DevCloud-${ApplicationName}-S3-Access'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub 
                    - 'arn:aws:s3:::${ScriptsBucketName}/*'
                    - ScriptsBucketName: 
                        Fn::ImportValue: !Sub '${NetworkStackName}-Scripts-Bucket-Name'
                  - !Sub 
                    - 'arn:aws:s3:::${ScriptsBucketName}'
                    - ScriptsBucketName: 
                        Fn::ImportValue: !Sub '${NetworkStackName}-Scripts-Bucket-Name'
                  - !Sub 'arn:aws:s3:::${DataBucket}/*'
                  - !Sub 'arn:aws:s3:::${DataBucket}'
        - PolicyName: !Sub 'DevCloud-${ApplicationName}-Route53-Access'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                  - route53:GetHostedZone
                  - route53:ListResourceRecordSets
                Resource: 
                  - !Sub 
                    - 'arn:aws:route53:::hostedzone/${PrivateHostedZoneId}'
                    - PrivateHostedZoneId: 
                        Fn::ImportValue: !Sub '${NetworkStackName}-Private-Hosted-Zone-ID'
              - Effect: Allow
                Action:
                  - route53:ListHostedZones
                Resource: '*'

  # Instance profile for private instances - allows EC2 to assume private instance role
  PrivateInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub 'DevCloud-${ApplicationName}-Role-${AWS::StackName}'
      Roles:
        - !Ref PrivateInstanceRole

  # =============================================================================
  # PRIVATE APPLICATION INSTANCE
  # =============================================================================

  # Private instance - main application server with fixed IP and no direct internet access
  PrivateInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.small
      ImageId: ami-042ad6e600ef0750b  # Amazon Linux 2023 AMI 2023.8.20250721.2 x86_64
      KeyName: !Ref KeyPairName
      SubnetId: 
        Fn::ImportValue: !Sub '${NetworkStackName}-Private-Subnet-ID'
      PrivateIpAddress: !Ref PrivateInstanceIP
      SecurityGroupIds:
        - Fn::ImportValue: !Sub '${NetworkStackName}-Private-SG-ID'
      IamInstanceProfile: !Ref PrivateInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
            VolumeType: gp3
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            
            # Set up logging for userdata execution
            exec > >(tee /var/log/user-data.log) 2>&1
            
            echo "=== DevCloud ${ApplicationName} Instance Initialization Started ==="
            echo "Timestamp: $(date)"

            # Create directories for scripts and parameters
            mkdir -p /opt/devcloud/scripts
            mkdir -p /opt/devcloud/config

            # Save initialization parameters to file for future use
            cat > /opt/devcloud/config/init-parameters.env << EOF
            APPLICATION_NAME=${ApplicationName}
            PRIVATE_HOSTED_ZONE_ID=${PrivateHostedZoneId}
            DOMAIN_NAME=${DomainName}
            SCRIPTS_BUCKET=${ScriptsBucket}
            DATA_BUCKET=${DataBucket}
            EFS_FILESYSTEM_ID=${EFSFileSystem}
            VPN_NAT_PRIVATE_IP=${VPNNATPrivateIP}
            EOF
            
            # Get instance metadata using IMDSv2
            TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600" -s)
            INSTANCE_ID=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/instance-id)
            AMI_ID=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/ami-id)
            INSTANCE_TYPE=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/instance-type)
            
            echo "Instance ID: $INSTANCE_ID"
            echo "AMI ID: $AMI_ID"
            echo "Instance Type: $INSTANCE_TYPE"
            echo "Application: ${ApplicationName}"
            echo "=========================================================="
            
            # Verify NAT Gateway connectivity before proceeding
            echo "Verifying internet connectivity through NAT Gateway..."
            VPN_NAT_IP=${VPNNATPrivateIP}
            echo "Expected NAT Gateway IP: $VPN_NAT_IP"
            
            # Test connectivity with retries
            for i in {1..10}; do
                echo "Connectivity test attempt $i/10..."
                if curl -s --connect-timeout 5 http://169.254.169.254/latest/meta-data/instance-id > /dev/null; then
                    echo "✓ Basic connectivity confirmed"
                    break
                elif [ $i -eq 10 ]; then
                    echo "✗ Failed to establish connectivity after 10 attempts"
                    exit 1
                else
                    echo "Retrying in 30 seconds..."
                    sleep 30
                fi
            done
            
            # Update system packages
            echo "Updating system packages..."
            yum update -y
            
            # Install EFS utilities
            echo "Installing EFS utilities..."
            yum install -y amazon-efs-utils
            
            # Create EFS mount point
            echo "Setting up EFS mount..."
            mkdir -p /mnt/efs
            
            # Mount EFS filesystem
            echo "Mounting EFS filesystem: ${EFSFileSystem}"
            mount -t efs -o tls ${EFSFileSystem}:/ /mnt/efs
            
            # Add EFS mount to fstab for persistence
            echo "${EFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /mnt/efs efs tls,_netdev" >> /etc/fstab
            
            # Set proper permissions
            chown ec2-user:ec2-user /mnt/efs
            
            # Download and execute initialization script from S3
            echo "Downloading initialization script from S3..."
            echo "Scripts Bucket: ${ScriptsBucket}"
            echo "Data Bucket: ${DataBucket}"
            echo "Private Hosted Zone: ${PrivateHostedZoneId}"
            echo "Domain Name: ${DomainName}"
            echo "EFS File System: ${EFSFileSystem}"
            
            if aws s3 cp s3://${ScriptsBucket}/init/private-instance-init.sh /opt/devcloud/scripts/private-instance-init.sh; then
                chmod +x /opt/devcloud/scripts/private-instance-init.sh
                echo "Executing initialization script..."
                if /opt/devcloud/scripts/private-instance-init.sh; then
                    echo "✓ Private instance initialization completed successfully"
                else
                    echo "✗ Private instance initialization failed with exit code $?"
                    exit 1
                fi
            else
                echo "✗ Failed to download private-instance-init.sh from S3"
                echo "Instance will continue without application-specific initialization"
            fi
            
            echo "=== DevCloud ${ApplicationName} Instance Initialization Completed ==="
            echo "Timestamp: $(date)"
            echo "Parameters saved to: /opt/devcloud/config/init-parameters.env"
            echo "Scripts stored in: /opt/devcloud/scripts/"
            echo "EFS mounted at: /mnt/efs"
            echo "Log file: /var/log/user-data.log"
            echo "=========================================================="
          - ApplicationName: !Ref ApplicationName
            ScriptsBucket: 
              Fn::ImportValue: !Sub '${NetworkStackName}-Scripts-Bucket-Name'
            DataBucket: !Ref DataBucket
            PrivateHostedZoneId: 
              Fn::ImportValue: !Sub '${NetworkStackName}-Private-Hosted-Zone-ID'
            DomainName: 
              Fn::ImportValue: !Sub '${NetworkStackName}-Domain-Name'
            EFSFileSystem: !Ref EFSFileSystem
            VPNNATPrivateIP:
              Fn::ImportValue: !Sub '${NetworkStackName}-VPN-NAT-Private-IP'
      Tags:
        - Key: Name
          Value: !Sub 'DevCloud-${ApplicationName}'
        - Key: Application
          Value: !Ref ApplicationName

Outputs:
  PrivateInstanceId:
    Description: Private Instance ID
    Value: !Ref PrivateInstance
    Export:
      Name: !Sub '${AWS::StackName}-Private-Instance-ID'

  PrivateInstancePrivateIP:
    Description: Private Instance Private IP (Fixed)
    Value: !GetAtt PrivateInstance.PrivateIp
    Export:
      Name: !Sub '${AWS::StackName}-Private-Instance-Private-IP'

  DataBucketName:
    Description: Application Data S3 Bucket Name
    Value: !Ref DataBucket
    Export:
      Name: !Sub '${AWS::StackName}-Data-Bucket-Name'

  EFSFileSystemId:
    Description: EFS File System ID
    Value: !Ref EFSFileSystem
    Export:
      Name: !Sub '${AWS::StackName}-EFS-FileSystem-ID'

  ApplicationName:
    Description: Application Name
    Value: !Ref ApplicationName
    Export:
      Name: !Sub '${AWS::StackName}-Application-Name'

  # Network Configuration Documentation
  ApplicationNetworkConfiguration:
    Description: 'Application Network Configuration'
    Value: !Sub 
      - 'Application: ${ApplicationName} | Instance: ${PrivateInstanceIP} | EFS: ${EFSFileSystem} | Data: ${DataBucket}'
      - PrivateInstanceIP: !Ref PrivateInstanceIP
        EFSFileSystem: !Ref EFSFileSystem
        DataBucket: !Ref DataBucket
        ApplicationName: !Ref ApplicationName
    Export:
      Name: !Sub '${AWS::StackName}-Application-Network-Configuration'
